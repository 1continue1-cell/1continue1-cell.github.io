<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>stl的应用</title>
    <link href="/2025/07/24/stl%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2025/07/24/stl%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>下面这句话是我刚学stl的时候学长跟我说的，现在看看其中的容易有的也是会卡大常数的，例如unordered_map</p><p>由于acm竞赛一般不会卡常数，不需要手写各种数据结构，用stl即可</p><h2 id="1-vector容器-等价理解成c语言中的数组"><a href="#1-vector容器-等价理解成c语言中的数组" class="headerlink" title="1.vector容器(等价理解成c语言中的数组)"></a>1.vector容器(等价理解成c语言中的数组)</h2><p>一维的vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cin &gt;&gt; a[i];<br></code></pre></td></tr></table></figure><p>vector的相关函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回vector a的长度</span><br>a.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//判断是否为空，空的话为1，非空的话为0</span><br>a.<span class="hljs-built_in">push_back</span>(temp);<span class="hljs-comment">//向vector a最后插入temp这个元素</span><br>a.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//删除最后一个元素</span><br></code></pre></td></tr></table></figure><p>二维的vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n,m;<br>cin &gt;&gt; n &gt;&gt; m;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(n,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m,<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>可以理解成n行m列的二维数组，并且初始化值为0</p><h2 id="2-map的应用"><a href="#2-map的应用" class="headerlink" title="2.map的应用"></a>2.map的应用</h2><p>最简单的map的小应用</p><p>遍历map的时间复杂度是log级别的！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>    <span class="hljs-type">int</span> temp;<br>    cin &gt;&gt; temp;<br>    mp[temp]++;<br>&#125;<br></code></pre></td></tr></table></figure><p>map的遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; k:mp)<br>    cout &lt;&lt; k.first &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; k.second&lt;&lt;endl;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">begin</span>();it!=mp.<span class="hljs-built_in">end</span>();it++)<br>    cout &lt;&lt; it-&gt;first &lt;&lt;<span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>关于map的更多的用法，即map中的第一个值用不同的格式存储，例如pair&lt;int,int&gt;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;PII;<br>map&lt;PII,<span class="hljs-type">int</span>&gt;mp;<br>mp[<span class="hljs-built_in">make_pair</span>(a,b)]++;<span class="hljs-comment">//将（a，b）作为数对，计入map中 </span><br></code></pre></td></tr></table></figure><h2 id="3-priority-queue-堆（优先队列）"><a href="#3-priority-queue-堆（优先队列）" class="headerlink" title="3.priority_queue 堆（优先队列）"></a>3.priority_queue 堆（优先队列）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,less&lt;<span class="hljs-type">int</span>&gt;&gt; q;<span class="hljs-comment">//储存int型数据 </span><br>priority_queue&lt;<span class="hljs-type">double</span>,vector&lt;<span class="hljs-type">double</span>&gt;,less&lt;<span class="hljs-type">double</span>&gt;&gt; q;<span class="hljs-comment">//储存double型数据 </span><br>priority_queue&lt;string,vector&lt;string&gt;,less&lt;string&gt;&gt; q;<span class="hljs-comment">//储存string型数据 </span><br>priority_queue&lt;结构体名,vector&lt;结构体名&gt;,less&lt;结构体名&gt;&gt; q;<span class="hljs-comment">//储存结构体或者类 </span><br></code></pre></td></tr></table></figure><p>优先队列默认维护的是最大值，即大根堆</p><p>若是想要小根堆，则将less改成greater即可</p><p>基本函数的应用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">q.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//返回堆当中维护的那个最大/最小值</span><br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出堆中的最大/最小值</span><br>q.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//如果堆为空，就返回真</span><br>q.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回堆中拥有的元素的个数</span><br>q.<span class="hljs-built_in">push</span>(temp);<span class="hljs-comment">//加入一个元素temp </span><br></code></pre></td></tr></table></figure><h2 id="4-string"><a href="#4-string" class="headerlink" title="4.string"></a>4.string</h2><p>字符串的一些题目非常的麻烦，需要我们熟练掌握string的用法</p><p>1.字符串的拼接(两个不同字符串的拼接，字符串自己的复制拼接，字符串和常量字符串的拼接)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello &quot;</span><br>string s2 = <span class="hljs-string">&quot;world!&quot;</span>;<br>string s3 = s1 + s2;<br><span class="hljs-comment">//s3 == &quot;hello world!&quot;</span><br>string s4 = <span class="hljs-string">&quot;hhh&quot;</span>;<br>string s5 = s4 + s4;<br><span class="hljs-comment">//s5 ==&quot;hhhhhh&quot;</span><br>s6 = <span class="hljs-string">&quot;ni hao&quot;</span>;<br>s6 = s6 + <span class="hljs-string">&quot; shuaige&quot;</span>;<br><span class="hljs-comment">//s6 ==&quot;ni hao shuaige&quot;</span><br></code></pre></td></tr></table></figure><p>2.字符串的拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br><span class="hljs-comment">// 把s1全部复制拷贝给s2</span><br>string s3 = (s1,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">//把s1从下标为1开始的三个字符拷贝给s3</span><br><span class="hljs-comment">//s3 == &quot;ell&quot;;</span><br></code></pre></td></tr></table></figure><p>3.字符串的判空与清空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">s1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>s2 = <span class="hljs-string">&quot;&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>();<span class="hljs-comment">//0</span><br>s<span class="hljs-number">2.</span><span class="hljs-built_in">empty</span>();<span class="hljs-comment">//1</span><br><span class="hljs-comment">// 如果字符串为空的话，返回1。</span><br><span class="hljs-comment">// 如果字符串不为空的话，返回0.</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空了s1字符串</span><br></code></pre></td></tr></table></figure><p><strong>4.字符串的增删查改</strong></p><p>push_back函数</p><p>append函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;h&#x27;</span>);<span class="hljs-comment">//把h尾插到s字符串的最后，尾插单个字符</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>string s2 = <span class="hljs-string">&quot; world!&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>();<br><span class="hljs-comment">// 括号里面可以是单个字符，也可以是字符串，也可以是整个s2</span><br>string s1 = <span class="hljs-string">&quot;hello &quot;</span>;<br>string s2 = <span class="hljs-string">&quot;world&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>(s2, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//尾插s2从下标0开始的2个字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;w&#x27;</span>); <span class="hljs-comment">//追加2个&#x27;w&#x27;字符在s1后面</span><br></code></pre></td></tr></table></figure><p>+&#x3D; 也是追加字符、字符串的方式之一</p><p>insert函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(s<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(),<span class="hljs-string">&#x27;w&#x27;</span>);<span class="hljs-comment">//向s1字符串之前插入一个</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(s<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(),<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-comment">//插入2个</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;come&quot;</span>); <span class="hljs-comment">//下标为2位置开始插入字符串&quot;come&quot;</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, s3, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">//取s3字符串下标从2开始的6个字符插入s1下标为2的位置</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//取world下标为0(默认)开始的2个字符插入到s1中下标为2的位置</span><br></code></pre></td></tr></table></figure><p>erase函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//删除s1下标从2开始的5个字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//删除s1下标从2开始的所有的字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>();<span class="hljs-comment">//删除整个字符串</span><br></code></pre></td></tr></table></figure><p>replace函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;xxxxxxxx&quot;</span>);<span class="hljs-comment">//将s1下标2开始的5个字符替换成xxxxxxxx;</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;xxx#xxwerqw&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-comment">//将s1下标2开始的5个字符替换成新字符串下标3开始的4个字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//将s1下标从2开始的5个字符，替换成3个*</span><br></code></pre></td></tr></table></figure><p>find函数</p><p>注意这个查找的返回值以及你要去查找的下标给定值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-type">int</span> po1 = s<span class="hljs-number">1.f</span>ind(<span class="hljs-string">&quot;ll&quot;</span>);<span class="hljs-comment">//从0位置开始找第一个ll，并返回位置，如果没有找到，返回-1</span><br><span class="hljs-comment">//注意！！！位置是从0开始的</span><br><span class="hljs-type">int</span> po2 = s<span class="hljs-number">1.f</span>ind(<span class="hljs-string">&quot;hel&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//从下标为1开始查找第一个hel</span><br></code></pre></td></tr></table></figure><p>substr函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>string s2 = s<span class="hljs-number">1.</span><span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//将下标从1开始的3个字符给s2</span><br>string s3 = s<span class="hljs-number">1.</span><span class="hljs-built_in">substr</span>();<span class="hljs-comment">//全部给s3</span><br></code></pre></td></tr></table></figure><h5 id="字符读入"><a href="#字符读入" class="headerlink" title="字符读入"></a>字符读入</h5><p>作为一个新手，字符读入总是被空格和回车搞蒙，现在总结一下字符读入的问题</p><p>1.cin 和 scanf 都会遇到空格或者回车强制停</p><p>2.gets读入的时候遇到了空格不会停止</p><p>3.getline(cin,s1) 读入的时候，只能读取一行，也就是遇到了回车就会强制停止</p><h2 id="5-bitset的用法"><a href="#5-bitset的用法" class="headerlink" title="5.bitset的用法"></a>5.bitset的用法</h2><p>bitset 相当于01数组，s.count()可以输出当中的1的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">bitset&lt;10&gt; s;<br>s[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>,s[<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>,s[<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)cout &lt;&lt; s[i];<br>cout &lt;&lt; s.<span class="hljs-built_in">count</span>();<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.bitset&lt;N&gt; a;<span class="hljs-comment">//设置a为一个N位的二进制数，初始化全部为 0</span><br>a.<span class="hljs-built_in">set</span>(i,<span class="hljs-number">1</span>);<span class="hljs-comment">//将第i位设置为1</span><br>a.<span class="hljs-built_in">count</span>();<span class="hljs-comment">//统计a中 1 的数量</span><br><span class="hljs-built_in">size</span>(a);<span class="hljs-comment">//获得 a 有几位</span><br>cout &lt;&lt; a;<span class="hljs-comment">//可以直接将a按字符形式输出。</span><br>a.<span class="hljs-built_in">reset</span>();<span class="hljs-comment">//将 1 全变为 0，重新初始化</span><br>a.<span class="hljs-built_in">flip</span>();<span class="hljs-comment">// 0 变 1，1变 0</span><br>a.<span class="hljs-built_in">none</span>();<span class="hljs-comment">//判断是否全为0，全0返回值为1，有1返回值为0</span><br>a.<span class="hljs-built_in">any</span>();<span class="hljs-comment">//判断是有1，全0返回值为0，有1返回值为1</span><br>a.<span class="hljs-built_in">test</span>(i);<span class="hljs-comment">//判断第i位是否为1，是1返回值为1，是0返回值为0 </span><br></code></pre></td></tr></table></figure><p>bitset的用法简单了解一下就可以，一般用bitset来记录一个数字是否使用过了</p><h2 id="6-set的用法"><a href="#6-set的用法" class="headerlink" title="6.set的用法"></a>6.set的用法</h2><p>关于set的用法，详见下面的代码，在自己用的如果有额外的用法可以补充</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// set 维护的值是单一不重复的</span><br>    <span class="hljs-comment">// 即使插入两个相同的值，也是只有一个</span><br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    set&lt;<span class="hljs-type">int</span>&gt; s;<span class="hljs-comment">//定义set（int类型），起名s </span><br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//插入元素 </span><br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//显示s中元素的个数 </span><br>    cout &lt;&lt; s.<span class="hljs-built_in">empty</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//判断s是否为空 </span><br>    cout &lt;&lt; s.<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//输出s中i的个数（1或者0，因为没有重复元素） </span><br>    s.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空s </span><br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; s.<span class="hljs-built_in">empty</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一/二维差分</title>
    <link href="/2025/07/24/%E4%B8%80-%E4%BA%8C%E7%BB%B4%E5%B7%AE%E5%88%86/"/>
    <url>/2025/07/24/%E4%B8%80-%E4%BA%8C%E7%BB%B4%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><p>现在给出 n 个数字，给出 q 次操作，每次操作给定一个区间，让区间里的数字都加上一个数或者减去一个数</p><p>如果一点一点遍历的话，就太慢了，所以建议使用一维差分的方法来做</p><p>(1) d数组是差分数组，差分数组多申请一位这样就算 r &#x3D;&#x3D; n 也可以直接写上去，更新前缀和的时候不会算入d[n+1]</p><p>(2) d数组一开始均为 0 ，最后求一遍前缀和得出的是差值，与 a 数组相加即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,q,l,r;<br><span class="hljs-type">int</span> a[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">111</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=q;i++)<br>    &#123;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-type">int</span> temp;<br>        cin &gt;&gt; temp;<br>        d[l] += temp;<br>        d[r<span class="hljs-number">+1</span>] -= temp; <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n;i++) d[i] = d[i<span class="hljs-number">-1</span>] + d[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) a[i] = a[i] + d[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++) cout &lt;&lt; a[i] &lt;&lt;  <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><p>想要从（x1,y1）到（x2,y2）都加上或者减去一个数，建议使用二维差分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">115</span>][<span class="hljs-number">115</span>];<span class="hljs-comment">//初始化出来的差分数组 </span><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            cin &gt;&gt; a[i][j];<br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1,x2,y1,y2;<br>        <span class="hljs-type">int</span> temp;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; temp;<br>        d[x1][y1] += temp;<br>        d[x1][y2<span class="hljs-number">+1</span>] -=temp;<br>        d[x2<span class="hljs-number">+1</span>][y1] -= temp;<br>        d[x2<span class="hljs-number">+1</span>][y2<span class="hljs-number">+1</span>] += temp;    <br>    &#125; <br>    <span class="hljs-comment">// q 次操作之后，再对差分数组求二维前缀和</span><br>    <span class="hljs-comment">// 再将新的d数组加到a数组上，得到最终答案数组 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            d[i][j] = d[i][j] + d[i<span class="hljs-number">-1</span>][j] + d[i][j<span class="hljs-number">-1</span>] - d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            a[i][j] = a[i][j] + d[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            cout &lt;&lt; a[i][j]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//综上得到了最终的二维数组的答案 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串哈希</title>
    <link href="/2025/07/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
    <url>/2025/07/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<p>鼠鼠我来整理哈希的笔记啦~ </p><h2 id="哈希的概念定义性质等的总结"><a href="#哈希的概念定义性质等的总结" class="headerlink" title="哈希的概念定义性质等的总结"></a>哈希的概念定义性质等的总结</h2><h3 id="哈希的定义"><a href="#哈希的定义" class="headerlink" title="哈希的定义"></a>哈希的定义</h3><p>我们定义一个把字符串映射到一个整数的函数 f, f 被称为 Hash 函数</p><p>我们希望通过 f 函数判断两个字符串是否相等</p><h3 id="哈希的性质"><a href="#哈希的性质" class="headerlink" title="哈希的性质"></a>哈希的性质</h3><p>(1) Hash 函数值不同，两个字符串一定不相同</p><p>(2) Hash 函数值相同，两个字符串大概率相同（也可能出现哈希冲突，小概率事件）</p><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>哈希冲突就是两个不同的字符串映射到了同一个哈希值上，在编写程序的时候我们应该尽量避免哈希冲突</p><p>减小哈希冲突常用方法：二次映射（如果有一次哈希值不同，两个字符串就不同）</p><h2 id="字符串哈希的相关代码"><a href="#字符串哈希的相关代码" class="headerlink" title="字符串哈希的相关代码"></a>字符串哈希的相关代码</h2><p>将一个字符串看作数字，设立一个进制（用base表示）,然后将这个字符串变成整数</p><p>常用进制数：31 , 131 , 1313 , 13131 , 131313 </p><p>取模：由于哈希值会超过既定数据范围，所以要有取模操作</p><p>常见取模操作：</p><p>(1) 开 unsigned long long 隐形取余</p><p>(2) 定义模数 const int mod &#x3D; 1e9 + 7;</p><h3 id="字符串哈希模板"><a href="#字符串哈希模板" class="headerlink" title="字符串哈希模板"></a>字符串哈希模板</h3><p><a href="https://www.luogu.com.cn/problem/P3370">P3370 【模板】字符串哈希 - 洛谷</a></p><p>模板1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br>unordered_map&lt;ull,<span class="hljs-type">int</span>&gt; mp;<span class="hljs-comment">// 记录每一个哈希值，溢出自动取余</span><br><span class="hljs-type">int</span> P = <span class="hljs-number">131</span>;<span class="hljs-comment">// 进制数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str;<br>    cin &gt;&gt; str;<br>    ull temp = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录当前字符串的哈希值 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= str.<span class="hljs-built_in">size</span>(); i++)<br>        temp = temp*P + (str[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br>      mp[temp] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>      cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-type">int</span> ans = mp.<span class="hljs-built_in">size</span>();<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>模板2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StringHash</span> <span class="hljs-comment">// 封装了一个类，还是比较有逼格的~</span><br>&#123;<br>    vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; h,b;<br>    <span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>    <span class="hljs-type">int</span> base;<br>    <span class="hljs-built_in">StringHash</span>(string &amp;s,<span class="hljs-type">int</span> base) :<span class="hljs-built_in">h</span>(s.<span class="hljs-built_in">size</span>()<span class="hljs-number">+1</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">b</span>(s.<span class="hljs-built_in">size</span>()<span class="hljs-number">+1</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">base</span>(base)<br>    &#123;<br>        b[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;    <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,n = s.<span class="hljs-built_in">size</span>();i&lt;=n;i++)<br>        &#123;<br>            b[i] = b[i<span class="hljs-number">-1</span>]*base%mod;<br>            h[i] = (h[i<span class="hljs-number">-1</span>]*base + s[i<span class="hljs-number">-1</span>])%mod;<br>        &#125;<br>    &#125;    <br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (h[r] - h[l<span class="hljs-number">-1</span>]*b[r-l<span class="hljs-number">+1</span>]%mod + mod)%mod;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>,<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; PLL;<br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    set&lt;PLL&gt; ans;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        string s;<br>        cin &gt;&gt; s;<br>        <span class="hljs-function">StringHash <span class="hljs-title">h1</span><span class="hljs-params">(s,<span class="hljs-number">13131</span>)</span>,<span class="hljs-title">h2</span><span class="hljs-params">(s,<span class="hljs-number">9973</span>)</span></span>;<br>        <span class="hljs-comment">// 用两个哈希值代替一个字符串</span><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> c1 = h<span class="hljs-number">1.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>,s.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> c2 = h<span class="hljs-number">2.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>,s.<span class="hljs-built_in">size</span>());<br>        ans.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">PLL</span>(c1,c2)); <br>    &#125;<br>    cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串哈希的进一步应用"><a href="#字符串哈希的进一步应用" class="headerlink" title="字符串哈希的进一步应用"></a>字符串哈希的进一步应用</h2><p><strong>(1) 滑动窗口问题</strong></p><p>例如现在有字符串 abcdef，窗口的长度为 len</p><p>abcd 表示为 A ：abase^3 + bbase^2 + cbase^1 + dbase^0;</p><p>bcde 表示为 B ：b<em>base^3 + c</em>base^2 + d<em>base^1 + e</em>base^0;</p><p>所以当窗口滑动的时候，两个字符串的转化关系为：</p><p>A base - a base^len + e base^0</p><p><strong>(2) 利用前缀和思想记录，并O (1) 地查询区间的哈希值</strong></p><p>可以开两个数组分别表示进位和整体的哈希前缀值，然后进行区间查询</p><h3 id="哈希求解最长回文串问题"><a href="#哈希求解最长回文串问题" class="headerlink" title="哈希求解最长回文串问题"></a>哈希求解最长回文串问题</h3><p>给定一个字符串，求这个字符串中<strong>最长的回文子串</strong></p><p>求解思路：</p><p>二分 + 字符串哈希</p><p>从头到尾遍历字符串的每一位，在每一位上二分回文长度即可，在二分中利用字符串哈希</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和问题</title>
    <link href="/2025/07/23/%E5%89%8D%E7%BC%80%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/23/%E5%89%8D%E7%BC%80%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><p>给出 n 个数字，一共 q 次查询，每一次查询问区间 [L,R] 内的数字之和。</p><p>如果遍历的话，时间复杂度太高，所以推荐使用前缀和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,q;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> sum[N]; <br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; q;<span class="hljs-comment">//读入 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<span class="hljs-comment">//初始化 </span><br>    <span class="hljs-comment">//下面两行代码实现了前缀和数组的初始化 </span><br>    sum[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n;i++) sum[i] = sum[i<span class="hljs-number">-1</span>] + a[i];<br>    <span class="hljs-comment">//sum[i] 记录的是从1到i 的数之和 </span><br>    <span class="hljs-keyword">while</span>(q--)<span class="hljs-comment">//q次查询 </span><br>    &#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-type">int</span> ans = sum[r] - sum[l<span class="hljs-number">-1</span>];<span class="hljs-comment">//注意这个写法 </span><br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p>sum[i][j] 统计的是二维矩阵（1，1）到（i，j）的所有元素的和</p><p>初始化：sum[i][j] &#x3D; a[i][j] + sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];</p><p>答案：int ans &#x3D; sum[x2][y2] - sum[x2][y1-1] - sum[x1-1][y2] + sum[x1-1][y1-1];</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-comment">//设置二维前缀sum的思路有利用容斥思想 </span><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> sum[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            cin &gt;&gt; a[i][j];<br>    sum[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//下面三行是在初始化二维的sum数组 </span><br>    <span class="hljs-comment">//因为我是从1，1开始的，所以直接这样初始化就可以 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            sum[i][j] = a[i][j] + sum[i<span class="hljs-number">-1</span>][j] + sum[i][j<span class="hljs-number">-1</span>] - sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-comment">// 求从（x1,y1）到 （x2,y2） 的全部元素的和</span><br>        <span class="hljs-type">int</span> ans = sum[x2][y2] - sum[x2][y1<span class="hljs-number">-1</span>] - sum[x1<span class="hljs-number">-1</span>][y2] + sum[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>];<br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; <br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/07/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/07/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2025/07/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/23/hello-world/"/>
    <url>/2025/07/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
