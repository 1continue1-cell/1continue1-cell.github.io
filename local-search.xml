<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分块算法</title>
    <link href="/2025/08/03/%E5%88%86%E5%9D%97%E7%AE%97%E6%B3%95/"/>
    <url>/2025/08/03/%E5%88%86%E5%9D%97%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="分块算法的思想及其作用"><a href="#分块算法的思想及其作用" class="headerlink" title="分块算法的思想及其作用"></a>分块算法的思想及其作用</h2><p>当一个问题暴力遍历解决时间复杂度太高的时候，可以将数列划分成若干个块，整块打标记维护，残块暴力维护</p><p>从而将原本为 n 的那部分时间复杂度变成 √n </p><p>分块算法能以 O(m√n) 的复杂度解决 <strong>区间修改 + 区间查询</strong> 的问题</p><h2 id="分块算法常用模板"><a href="#分块算法常用模板" class="headerlink" title="分块算法常用模板"></a>分块算法常用模板</h2><p>block：表示块的大小(但是最后一个块的大小大概率不是block)</p><p>t：表示块的数量</p><p>pos[N]：记录每一个下标所在的块的序号</p><p>st[N]：记录每一个块的起始坐标</p><p>ed[N]：记录每一个块的终止坐标</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> block = <span class="hljs-built_in">sqrt</span>(n);  <span class="hljs-comment">// 块的大小 </span><br><span class="hljs-type">int</span> t = n/block;    <span class="hljs-comment">// 块的数量 </span><br><span class="hljs-keyword">if</span>(n%block) t++;   <span class="hljs-comment">// 如果最后还有残余，块的数量加 1  </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)  <br>&#123;<br>    st[i] = (i<span class="hljs-number">-1</span>)*block + <span class="hljs-number">1</span>; <br>      ed[i] = i*block;    <br>&#125; <br>ed[t] = n;<span class="hljs-comment">// 最后一个块的终止坐标是 n  </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-comment">// 记录每一个坐标对应的块的序号 </span><br>    pos[i] = (i<span class="hljs-number">-1</span>)/block + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="分块的题目总结"><a href="#分块的题目总结" class="headerlink" title="分块的题目总结"></a>分块的题目总结</h2><h3 id="块状数组"><a href="#块状数组" class="headerlink" title="块状数组"></a>块状数组</h3><p><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1 - 洛谷</a></p><p>**区间加和 + 区间查询 问题 ** 【板子】</p><p>重点：</p><p>(1) sum[N] 数组用来记录每一个块的和值</p><p>(2) add_[N] 数组用来记录对于每一个整块的标记</p><p>思路分析：</p><p>(1) <strong>区间加和</strong>：当 [l,r] 在一个残块里，直接暴力遍历残块，同时更新每一个元素，并且修改当前残块的sum值</p><p>当 [l,r] 跨过多个块的时候，对于残块，使用上面的操作，对于整块，直接标记add_数组即可</p><p>(2) <strong>区间查询</strong>：当 [l,r] 在一个残块里，直接遍历残块，a[j] + add_[pos[j]] 为当前元素的真实值，求和即可</p><p>当 [l,r] 跨国多个块的时候，对于残块，使用上面的操作，遍历所有整块，每一个块的真实和值为 sum[j] + add_[j]*block</p><p> 代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> block,t;<br><span class="hljs-type">int</span> pos[N],st[N],ed[N];<br><span class="hljs-type">int</span> sum[N]; <span class="hljs-comment">// 记录每一个分块的和值</span><br><span class="hljs-type">int</span> add_[N];<span class="hljs-comment">// 记录每一个分块加上的额外的数值 </span><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>      ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>      cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>      cin &gt;&gt; n &gt;&gt; m;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>      block = <span class="hljs-built_in">sqrt</span>(n);<br>      t = n/block;<br>      <span class="hljs-keyword">if</span>(n%block) t++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)<br>    &#123;<br>          st[i] = (i<span class="hljs-number">-1</span>)*block + <span class="hljs-number">1</span>;<br>          ed[i] = i*block;<br>      &#125;<br>      ed[t] = n;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>          pos[i] = (i<span class="hljs-number">-1</span>)/block + <span class="hljs-number">1</span>;<br>      <span class="hljs-comment">// 分块的初始化处理 ^^^^^^</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>      &#123;<br>          <span class="hljs-type">int</span> temp = a[i];<br>          <span class="hljs-type">int</span> p = pos[i];<br>            sum[p] += temp;    <br>      &#125; <br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= m;i++)<br>      &#123;<br>            <span class="hljs-type">int</span> op;<br>            cin &gt;&gt; op;<br>            <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) <span class="hljs-comment">// [l,r] 都加上 k </span><br>            &#123;<br>            <span class="hljs-type">int</span> l,r,k;<br>                  cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;<br>                  <span class="hljs-keyword">if</span>(pos[l] == pos[r]) <span class="hljs-comment">// 块内暴力 </span><br>                  &#123;<br>                      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=r;j++)<br>                      &#123;<br>                            a[j] += k;<br>                            sum[pos[l]] += k;<br>                        &#125;<br>                  &#125;            <br>                  <span class="hljs-keyword">else</span><br>                  &#123;<br>                        <span class="hljs-comment">// 块内暴力 </span><br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=ed[pos[l]];j++) a[j] += k,sum[pos[l]] += k;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=r;j++) a[j] += k,sum[pos[r]] += k;<br>                        <span class="hljs-comment">// 块间标记</span><br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = pos[l] + <span class="hljs-number">1</span>;j &lt;= pos[r] - <span class="hljs-number">1</span>;j++)<br>                            add_[j] += k;<br>                  &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                  <span class="hljs-type">int</span> l,r;<br>                  cin &gt;&gt; l &gt;&gt; r;<br>                  <span class="hljs-keyword">if</span>(pos[l] == pos[r]) <span class="hljs-comment">// 如果在一个区间里面的话 </span><br>                  &#123;<br>                        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=r;j++)<br>                            ans = ans + (a[j] + add_[pos[l]]);<br>                  cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                  &#125;<br>                  <span class="hljs-keyword">else</span> <span class="hljs-comment">// 否则不是一个区间里面的 </span><br>                  &#123;<br>                        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>                      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=ed[pos[l]];j++) ans = ans + (a[j] + add_[pos[l]]);<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=r;j++) ans = ans + (a[j] + add_[pos[r]]);<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = pos[l] + <span class="hljs-number">1</span>;j&lt; pos[r];j++)<br>                            ans = ans + (sum[j] + add_[j]*block);<br>                        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; <br>                  &#125;<br>            &#125;<br>      &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P2801">P2801 教主的魔法 - 洛谷</a></p><p><strong>求解区间第 k 大问题，标准解法是可持久化线段树(主席树) ，时间复杂度为 O(mlog2 n)</strong></p><p>但是这个题用分块算法也是可以做的</p><p>重点：</p><p>(1) 额外申请一个 b 数组存储另一份数据，并将 b 数组按照每一个块的区间从小到大排序，防止打乱原数组a的元素，也为了方便后续二分找答案</p><p>(2) add 数组标记整块的增加的数值</p><p>思路整理：</p><p>(1) 先将 b 数组中的元素，按照每一个块的区间从小到大排序</p><p>(2) <strong>区间修改</strong>：如果是残块，直接修改残块的数值，并将这个残块对应的一整块的数值重新赋值给 b 数组，并对这一整块对应的 b 数组区间进行重新排序（由于修改了整块的部分元素，会导致原先元素的相对顺序发生改变），如果是整块，直接维护add标记即可，不需要再排序(因为整块加一个元素不会改变元素之间的相对顺序)</p><p>(3) <strong>区间查询</strong>：如果是残块，直接遍历查询即可，如果是整块，遍历区间内的所有整块，每一个整块使用二分进行查询答案即可</p><p>注意元素的真实值为 ：a[j] + add_[pos[j]]</p><p>至此题目分析完毕，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> n,q;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-type">int</span> block,t,pos[N],st[N],ed[N],add[N];<br><span class="hljs-type">int</span> c;<span class="hljs-comment">// 将这个 c 单独定义在外面 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> k)</span> <span class="hljs-comment">// 这个个数是否可以满足呢 </span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 问你在 第 k 个块中是否有 x 个数字 大于等于 c呢</span><br>    <span class="hljs-type">int</span> ll = st[k], rr = ed[k];<br>    <span class="hljs-type">int</span> pos_now = rr - x + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b[pos_now] + add[k] &gt;= c) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>      ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>      cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>        cin &gt;&gt; n &gt;&gt; q;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) b[i] = a[i];<br>      block = <span class="hljs-built_in">sqrt</span>(n);<br>      t = n/block;<br>      <span class="hljs-keyword">if</span>(n%block) t++;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)<br>      &#123;<br>            st[i] = (i<span class="hljs-number">-1</span>)*block + <span class="hljs-number">1</span>;<br>            ed[i] = i*block;<br>      &#125;<br>      ed[t] = n;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>          pos[i] = (i<span class="hljs-number">-1</span>)/block + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++) <span class="hljs-comment">// 内部排一下序</span><br>      &#123;<br>            <span class="hljs-comment">// st[i] ----- ed[i] </span><br>            <span class="hljs-built_in">sort</span>(b+st[i],b+ed[i]<span class="hljs-number">+1</span>);<br>      &#125;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=q;i++)<br>      &#123;<br>            <span class="hljs-type">char</span> ch;<br>            cin &gt;&gt; ch;<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;M&#x27;</span>)<br>            &#123;<br>                  <span class="hljs-type">int</span> l,r,w;<br>                  cin &gt;&gt; l &gt;&gt; r &gt;&gt; w;<br>                  <span class="hljs-comment">// 区间上加 w </span><br>              <span class="hljs-keyword">if</span>(pos[l] == pos[r]) <span class="hljs-comment">// 如果是一个区间的话 </span><br>                  &#123;<br>                      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=r;j++) a[j] += w;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[l]];j&lt;=ed[pos[l]];j++) b[j] = a[j];<br>                        <span class="hljs-built_in">sort</span>(b + st[pos[l]],b + ed[pos[r]] + <span class="hljs-number">1</span>);    <br>                  &#125;        <br>                  <span class="hljs-keyword">else</span> <span class="hljs-comment">// 不是一个区间里的话 </span><br>                  &#123;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=ed[pos[l]];j++) a[j] += w;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[l]];j&lt;=ed[pos[l]];j++) b[j] = a[j];<br>                        <span class="hljs-built_in">sort</span>(b + st[pos[l]],b + ed[pos[l]] + <span class="hljs-number">1</span>);<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=r;j++) a[j] += w;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=ed[pos[r]];j++) b[j] = a[j];<br>                        <span class="hljs-built_in">sort</span>(b + st[pos[r]],b + ed[pos[r]] + <span class="hljs-number">1</span>);<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = pos[l] + <span class="hljs-number">1</span>;j&lt;=pos[r] - <span class="hljs-number">1</span>;j++)<br>                            add[j] += w; <br>                  &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-comment">// 否则进行区间查询操作 </span><br>            &#123;<br>                  <span class="hljs-type">int</span> l,r;<br>                  cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;<br>                  <span class="hljs-comment">// 区间上查询大于等于 c 的个数</span><br>                <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span>(pos[l] == pos[r])<br>                  &#123;<br>                      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=r;j++)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span>(a[j] + add[pos[l]] &gt;= c) ans++;    <br>                        &#125;    <br>                  &#125; <br>                  <span class="hljs-keyword">else</span> <span class="hljs-comment">// 否则不在一个区间里面 </span><br>                  &#123;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=ed[pos[l]];j++)<br>                            <span class="hljs-keyword">if</span>(a[j] + add[pos[l]] &gt;= c) ans++;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=r;j++)<br>                            <span class="hljs-keyword">if</span>(a[j] + add[pos[r]] &gt;= c) ans++;<br>                        <span class="hljs-comment">// 剩下的整块二分处理</span><br>                          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = pos[l] + <span class="hljs-number">1</span>;j&lt;=pos[r] - <span class="hljs-number">1</span>;j++)<br>                          &#123;<br>                                <span class="hljs-comment">// 二分处理</span><br>                                <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = block,mid;<br>                                <span class="hljs-keyword">while</span>(l&lt;r)<br>                                &#123;<br>                                    mid = (l + r + <span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>                                      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid,j)) l = mid;<br>                                      <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;    <br>                                &#125; <br>                                ans += l;<br>                          &#125; <br>                  &#125;<br>                  cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P3870">P3870 [TJOI2009] 开关 - 洛谷</a></p><p>这个题目究其根源其实和上面的第一个题很像，只是稍微做了一点变动，所以代码就不cv了，不管是自己复习还是各位神犇看我的博客都没必要赘述</p><p>分析重点：</p><p>(1) sum[N] 数组记录每一个块内开着的灯的数量</p><p>(2) add_[N] 数组维护块的标记</p><p>(3) a[N] 数组记录每一个灯的状态，0 关 1 开</p><p><strong>注意：一开始所有的灯都是熄灭的</strong></p><p>思路分析：</p><p>(1) 一开始所有的灯都是熄灭的，所以sum数组不需要先维护，add数组因为没标记也不需要先维护，只需要写上基本的分块的板子即可</p><p>(2) 区间修改：对于残块，直接遍历改变a的数值并且实时维护 sum 的数值，对于整块，直接add标记即可</p><p>(3) 区间查询: 对于残块，直接遍历 a 数组查询即可，对于整块，遍历区间内的整块求和</p><p><strong>(a[j] + add_[pos[j]]) % 2 为灯的真实状态</strong></p><p><strong>如果 add_[j]%2 &#x3D;&#x3D; 0 , sum[j] 为真实整块数值</strong></p><p><strong>否则的话 block - sum[j] 才为真实整块数值</strong></p><p>代码略~~（自己写呗，不要偷懒哦）</p><p><a href="https://www.luogu.com.cn/problem/P3203">P3203 [HNOI2010] 弹飞绵羊 - 洛谷</a></p><p>****单点修改 + 单点查询 标准解法为 动态树(LCT) ****</p><p>分块也勉强可以通过</p><p>重点：</p><p>(1) to[N] 数组记录当前点跳出该点所在块后去到了哪一个位置</p><p>(2) step[N] 数组记录当前点跳出该点所在块所需要的步数</p><p>注意：在初始化维护to和step数组的时候应该在每一个块内倒序维护，防止超时，具体细节见下述代码</p><p>整体思路梳理：</p><p>先写下分块算法的基本模板后，遍历每一个块维护to和step数组初始的值，在一个块内倒序遍历，从当前位置开始往下跳，直到跳出这个块或者跳到的点所对应的to数组有值(这样操作可以防止跳的次数太多，从而超时)</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 跳绵羊的题目，需要好好体会一下啊 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> block,t,pos[N],st[N],ed[N];<br><span class="hljs-type">int</span> step[N],to[N];<br><span class="hljs-comment">// 分别表示当前点跳出当前块需要的步数，以及跳出当前块后到达的位置 </span><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>      ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>      cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>      cin &gt;&gt; n;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>      block = <span class="hljs-built_in">sqrt</span>(n);<br>      t = n/block;<br>      <span class="hljs-keyword">if</span>(n%block) t++;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)<br>      &#123;<br>            st[i] = (i<span class="hljs-number">-1</span>)*block + <span class="hljs-number">1</span>;<br>            ed[i] = i*block;<br>      &#125;<br>      ed[t] = n;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>          pos[i] = (i<span class="hljs-number">-1</span>)/block + <span class="hljs-number">1</span>;<br>      <span class="hljs-comment">// 分块的板子初始化 ^^^^^^^^^</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++) <span class="hljs-comment">// 维护 to 和 step 数组的初始数值 </span><br>    &#123;<br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = ed[i];j&gt;=st[i];j--) <span class="hljs-comment">// 这里倒着维护，别超时了 </span><br>          &#123;<br>              <span class="hljs-keyword">if</span>(j + a[j] &gt; ed[i]) <span class="hljs-comment">// 如果一步跳出去了</span><br>                  &#123;<br>                      step[j] = <span class="hljs-number">1</span>;<br>                      to[j] = j + a[j];    <br>                  &#125; <br>                  <span class="hljs-keyword">else</span> <span class="hljs-comment">// 一步出不去 </span><br>                   &#123;<br>                      <span class="hljs-type">int</span> temp = j + a[j];<br>                      <span class="hljs-type">int</span> num_step = <span class="hljs-number">1</span>;<br>                      <span class="hljs-keyword">while</span>(to[temp] == <span class="hljs-number">0</span> &amp;&amp; temp &lt;= ed[i])<br>                      &#123;<br>                            temp = temp + a[temp];<br>                            num_step++;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(temp &lt;= ed[i])<br>                        &#123;<br>                              step[j] = num_step + step[temp];<br>                              to[j] = to[temp];<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            step[j] = num_step;<br>                            to[j] = temp;<br>                        &#125;<br>                  &#125;<br>            &#125;<br>      &#125;<br>      cin &gt;&gt; m;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)<br>      &#123;<br>            <span class="hljs-type">int</span> op;<br>            cin &gt;&gt; op;<br>            <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)<br>            &#123;<br>              <span class="hljs-type">int</span> id;<br>                  cin &gt;&gt; id; <span class="hljs-comment">// 问你 id 位置的几次后被弹飞出去    </span><br>                  id++;    <br>            <span class="hljs-type">int</span> jilu = id;<br>                  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">while</span>(jilu &lt;= n)<br>                  &#123;<br>                        ans = ans + step[jilu];<br>                      jilu = to[jilu];<br>                  &#125;               <br>                  cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                  <span class="hljs-type">int</span> id,k;<br>                  cin &gt;&gt; id &gt;&gt; k;<br>                  <span class="hljs-comment">// 改变 id 位置的弹簧弹力值为 k</span><br>                  id++;<br>                a[id] = k;<br>                  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = ed[pos[id]];j&gt;=st[pos[id]];j--) <span class="hljs-comment">// 遍历这个块，整体全都修改 </span><br>                  &#123;<br>                      <span class="hljs-keyword">if</span>(j + a[j] &gt; ed[pos[id]]) <span class="hljs-comment">// 如果一步跳出去了</span><br>                      &#123;<br>                          step[j] = <span class="hljs-number">1</span>;<br>                          to[j] = j + a[j];    <br>                      &#125;<br>                      <span class="hljs-keyword">else</span> <span class="hljs-comment">// 一步出不去 </span><br>                      &#123;<br>                          <span class="hljs-type">int</span> temp = j + a[j];<br>                          <span class="hljs-type">int</span> num_step = <span class="hljs-number">1</span>;<br>                          <span class="hljs-keyword">while</span>(to[temp] == <span class="hljs-number">0</span> &amp;&amp; temp &lt;= ed[pos[id]])<br>                          &#123;<br>                                temp = temp + a[temp];<br>                                num_step++;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(temp &lt;= ed[pos[id]])<br>                        &#123;<br>                              step[j] = num_step + step[temp];<br>                              to[j] = to[temp];<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            step[j] = num_step;<br>                            to[j] = temp;<br>                        &#125;<br>                  &#125;<br>              &#125; <br>         &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P4168">P4168 [Violet] 蒲公英 - 洛谷</a></p><p><strong>区间众数问题</strong></p><p>注意这个题目只有查询并没有修改哦</p><p>重点：</p><p>(1) 对给定的数值进行<strong>离散化处理</strong>，数值1e9范围太大，（<strong>但是个数并不多，所以可以离散处理</strong>）</p><p>(2) s[i][j] 数组记录的是前 i 个块中 数字 j (离散化后的) 出现的次数</p><p>(3) p[i][j] 数组记录的是块 i 到 块 j 之间的众数（也是离散化后的）</p><p>思路分析：</p><p>假设现在已经知道了s和p数组的内容（后面会给出两个数组如何初始化操作）</p><p>如果区间在一个块内的话，直接暴力查询即可</p><p>如果不在一个块内的话，先利用p和s求出中间所有整块对应的众数及其出现次数（假定块从 ll 到 rr）</p><p>众数：p[ll][rr] -&gt; temp(暂时用temp表示)</p><p>次数：s[rr][temp] - s[ll-1][temp]</p><p>然后<strong>遍历两次左右两边的残块</strong>，第一次记录每一个数字新出现的次数，第二次看这些残块中的数字是否会成为新的众数</p><p>p数组和s数组的初始化：</p><p>s数组：遍历所有的块，利用前缀思想，当前块<strong>先继承</strong>来自前一个块位置的所有信息，<strong>再加上</strong>当前块的数字出现的个数</p><p>p数组：同样考虑前缀思想，对于 i 到 j 块内的众数，我们先假定它和 i 到 j-1 块内的众数相同，接着我们还是额外统计第 i 个块中每个数字出现的次数 ，然后把这个和前 i 到 j-1 个块中这个数字出现的次数相加，和当前我们假定的众数的总出现次数比较，考虑能否更新新的众数</p><p>至此，本题分析结束，呼~~</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">4e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];          <span class="hljs-comment">// 存储离散化后的ID</span><br><span class="hljs-type">int</span> aa[N];         <span class="hljs-comment">// 存储原始输入值</span><br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;       <span class="hljs-comment">// 离散化ID计数器</span><br><span class="hljs-type">int</span> block, t;<br><span class="hljs-type">int</span> pos[N], st[N], ed[N];<br><span class="hljs-type">int</span> xx = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> p[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];   <span class="hljs-comment">// 块i到j的众数（离散化ID）</span><br><span class="hljs-type">int</span> s[<span class="hljs-number">205</span>][<span class="hljs-number">40005</span>]; <span class="hljs-comment">// 前i块中ID的出现次数</span><br>vector&lt;<span class="hljs-type">int</span>&gt; mp_r;  <span class="hljs-comment">// ID到原始值的映射（替换unordered_map）</span><br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; aa[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 优化：用vector+二分进行离散化</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(aa + <span class="hljs-number">1</span>, aa + n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-built_in">sort</span>(tmp.<span class="hljs-built_in">begin</span>(), tmp.<span class="hljs-built_in">end</span>());<br>    tmp.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(tmp.<span class="hljs-built_in">begin</span>(), tmp.<span class="hljs-built_in">end</span>()), tmp.<span class="hljs-built_in">end</span>());<br>    cnt = tmp.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>;<br>    mp_r.<span class="hljs-built_in">resize</span>(cnt);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; tmp.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        mp_r[i + <span class="hljs-number">1</span>] = tmp[i];  <span class="hljs-comment">// ID=1对应tmp[0]</span><br>    &#125;<br>    <span class="hljs-comment">// 转换a为离散化ID</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        a[i] = <span class="hljs-built_in">lower_bound</span>(tmp.<span class="hljs-built_in">begin</span>(), tmp.<span class="hljs-built_in">end</span>(), aa[i]) - tmp.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 分块初始化</span><br>    block = <span class="hljs-built_in">sqrt</span>(n);<br>    t = n / block;<br>    <span class="hljs-keyword">if</span> (n % block) t++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i++) &#123;<br>        st[i] = (i - <span class="hljs-number">1</span>) * block + <span class="hljs-number">1</span>;<br>        ed[i] = i * block;<br>    &#125;<br>    ed[t] = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        pos[i] = (i - <span class="hljs-number">1</span>) / block + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 预处理s数组（用离散化ID，避免map查询）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i++) &#123;<br>        <span class="hljs-comment">// 复制前i-1块的计数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; cnt; j++) &#123;<br>            s[i][j] = s[i - <span class="hljs-number">1</span>][j];<br>        &#125;<br>        <span class="hljs-comment">// 累加当前块的ID计数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = st[i]; j &lt;= ed[i]; j++) &#123;<br>            s[i][a[j]]++;  <span class="hljs-comment">// a[j]已为ID，直接访问</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 预处理p[i][j]（用离散化ID，避免map查询）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i++) &#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt_block</span><span class="hljs-params">(cnt, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> max_cnt = <span class="hljs-number">0</span>, mode = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= t; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = st[j]; k &lt;= ed[j]; k++) &#123;<br>                <span class="hljs-type">int</span> id = a[k];  <span class="hljs-comment">// 直接用ID</span><br>                cnt_block[id]++;<br>                <span class="hljs-keyword">if</span> (cnt_block[id] &gt; max_cnt || (cnt_block[id] == max_cnt &amp;&amp; mp_r[id] &lt; mp_r[mode])) &#123;<br>                    max_cnt = cnt_block[id];<br>                    mode = id;<br>                &#125;<br>            &#125;<br>            p[i][j] = mode;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理查询</span><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> l0, r0;<br>        cin &gt;&gt; l0 &gt;&gt; r0;<br>        <span class="hljs-type">int</span> l = ((l0 + xx - <span class="hljs-number">1</span>) % n) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> r = ((r0 + xx - <span class="hljs-number">1</span>) % n) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-built_in">swap</span>(l, r);<br><br>        <span class="hljs-keyword">if</span> (pos[l] == pos[r]) &#123;  <span class="hljs-comment">// 同块查询：数组计数</span><br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp_cnt</span><span class="hljs-params">(cnt, <span class="hljs-number">0</span>)</span></span>;<br>            <span class="hljs-type">int</span> max_num = <span class="hljs-number">0</span>, ans_id = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = l; j &lt;= r; j++) &#123;<br>                <span class="hljs-type">int</span> id = a[j];<br>                temp_cnt[id]++;<br>                <span class="hljs-keyword">if</span> (temp_cnt[id] &gt; max_num || (temp_cnt[id] == max_num &amp;&amp; mp_r[id] &lt; mp_r[ans_id])) &#123;<br>                    max_num = temp_cnt[id];<br>                    ans_id = id;<br>                &#125;<br>            &#125;<br>            xx = mp_r[ans_id];<br>            cout &lt;&lt; xx &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 跨块查询：数组计数边缘块</span><br>            vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">temp_cnt</span>(cnt, <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 左边缘</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = l; j &lt;= ed[pos[l]]; j++) &#123;<br>                temp_cnt[a[j]]++;<br>            &#125;<br>            <span class="hljs-comment">// 右边缘</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = st[pos[r]]; j &lt;= r; j++) &#123;<br>                temp_cnt[a[j]]++;<br>            &#125;<br>            <span class="hljs-comment">// 中间块众数</span><br>            <span class="hljs-type">int</span> ll = pos[l] + <span class="hljs-number">1</span>, rr = pos[r] - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> m1 = p[ll][rr];<br>            <span class="hljs-type">int</span> m2 = s[rr][m1] - s[ll - <span class="hljs-number">1</span>][m1];<br>            <span class="hljs-comment">// 检查左边缘元素</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = l; j &lt;= ed[pos[l]]; j++) &#123;<br>                <span class="hljs-type">int</span> id = a[j];<br>                <span class="hljs-type">int</span> total = temp_cnt[id] + (s[rr][id] - s[ll - <span class="hljs-number">1</span>][id]);<br>                <span class="hljs-keyword">if</span> (total &gt; m2 || (total == m2 &amp;&amp; mp_r[id] &lt; mp_r[m1])) &#123;<br>                    m1 = id;<br>                    m2 = total;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 检查右边缘元素</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = st[pos[r]]; j &lt;= r; j++) &#123;<br>                <span class="hljs-type">int</span> id = a[j];<br>                <span class="hljs-type">int</span> total = temp_cnt[id] + (s[rr][id] - s[ll - <span class="hljs-number">1</span>][id]);<br>                <span class="hljs-keyword">if</span> (total &gt; m2 || (total == m2 &amp;&amp; mp_r[id] &lt; mp_r[m1])) &#123;<br>                    m1 = id;<br>                    m2 = total;<br>                &#125;<br>            &#125;<br>            xx = mp_r[m1];<br>            cout &lt;&lt; xx &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P4135">P4135 作诗 - 洛谷</a></p><p>这道题和蒲公英比较像，大体思路差不多,这道题的数据范围都在1e5以内，所以不需要离散化</p><p>重点：</p><p>(1) freq[i][j]：表示在前 i 个块中 数字 j 出现了多少次</p><p>(2) mode[i][j]：i 到 j 块之间，出现正偶数次的数字有多少个</p><p>思路梳理：</p><p>首先进行分块的基本处理，freq和mode数组的处理见上面的蒲公英，非常类似，或者看一下这道题的代码对比理解一下即可</p><p>然后进行区间查询</p><p>如果在一个块内，直接暴力统计即可</p><p>否则，统计整块区间对应的正偶数出现的次数，然后遍历两次左右残块，第一次记录残块中数字出现的次数，第二次看残块中的每一个元素对当前的答案造成的影响</p><p>(这个题的思路和蒲公英很像，所以不做详细解释)</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> NN = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> n,c,m;<br><span class="hljs-type">int</span> block,t,pos[N],st[N],ed[N];<br><span class="hljs-type">int</span> freq[NN][N];<br><span class="hljs-type">int</span> mode[NN][NN];<br><span class="hljs-type">int</span> xx = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; c &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>    block = <span class="hljs-built_in">sqrt</span>(n);<br>    t = n/block;<br>    <span class="hljs-keyword">if</span>(n%block) t++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)<br>    &#123;<br>        st[i] = (i<span class="hljs-number">-1</span>)*block + <span class="hljs-number">1</span>;<br>        ed[i] = i*block;<br>    &#125;<br>    ed[t] = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        pos[i] = (i<span class="hljs-number">-1</span>)/block + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 分块板子</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=c;j++)<br>            freq[i][j] = freq[i<span class="hljs-number">-1</span>][j];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[i];j&lt;=ed[i];j++)<br>        &#123;<br>            <span class="hljs-type">int</span> temp = a[j];<br>            freq[i][temp]++;    <br>        &#125;    <br>    &#125; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)<br>    &#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(N)</span></span>;<span class="hljs-comment">// 临时记录每一个数字出现的次数</span><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;    <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i;j&lt;=t;j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = st[j];k&lt;=ed[j];k++)<br>            &#123;<br>                <span class="hljs-type">int</span> temp = a[k];<br>                cnt[temp]++;<br>                <span class="hljs-keyword">if</span>(cnt[temp]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) ans++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt[temp]%<span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; cnt[temp] != <span class="hljs-number">1</span>) ans--;<br>            &#125;    <br>            mode[i][j] = ans;    <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l0,r0;<br>        cin &gt;&gt; l0 &gt;&gt; r0;<br>        <span class="hljs-type">int</span> l,r;<br>        l = (l0 + xx)%n + <span class="hljs-number">1</span>;<br>        r = (r0 + xx)%n + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(l&gt;r) <span class="hljs-built_in">swap</span>(l,r);<br>        <span class="hljs-keyword">if</span>(pos[l] == pos[r]) <span class="hljs-comment">// 一个区间内 </span><br>        &#123;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(N)</span></span>;<br>            <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=r;j++)<br>            &#123;<br>                vec[a[j]]++;<br>                <span class="hljs-keyword">if</span>(vec[a[j]]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) ans++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vec[a[j]] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; vec[a[j]]!=<span class="hljs-number">1</span>) ans--;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            xx = ans;<br>        &#125;    <br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">// 不在一个区间内的话 </span><br>        &#123;<br>            <span class="hljs-type">int</span> ans =  <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> jilu,ll,rr;<br>            ll = pos[l]+ <span class="hljs-number">1</span>;<br>            rr = pos[r] - <span class="hljs-number">1</span>;<br>            jilu = mode[ll][rr]; <span class="hljs-comment">// 记录整块内的正偶数的个数 </span><br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mp_jilu</span><span class="hljs-params">(N)</span></span>;<br>            <span class="hljs-comment">// 先遍历一次左右残块</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=ed[pos[l]];j++) mp_jilu[a[j]]++;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=r;j++) mp_jilu[a[j]]++;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=ed[pos[l]];j++)<br>            &#123;<br>                <span class="hljs-type">int</span> temp = a[j];<br>                <span class="hljs-keyword">if</span>(mp_jilu[temp] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-type">int</span> kk = mp_jilu[temp];<br>                    mp_jilu[temp] = <span class="hljs-number">0</span>;<br>                    <span class="hljs-type">int</span> num = freq[rr][temp] - freq[ll<span class="hljs-number">-1</span>][temp];<br>                    <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(kk%<span class="hljs-number">2</span> ==<span class="hljs-number">0</span>) jilu++;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; kk % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>) jilu++;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; kk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) jilu--;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;    <br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=r;j++)<br>            &#123;<br>                <span class="hljs-type">int</span> temp = a[j];<br>                <span class="hljs-keyword">if</span>(mp_jilu[temp] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-type">int</span> kk = mp_jilu[temp];<br>                    mp_jilu[temp] = <span class="hljs-number">0</span>;<br>                    <span class="hljs-type">int</span> num = freq[rr][temp] - freq[ll<span class="hljs-number">-1</span>][temp];<br>                    <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(kk%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) jilu++;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; kk % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>) jilu++;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; kk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) jilu--;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;        <br>                    &#125;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; jilu &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            xx = jilu;    <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P5048">P5048 [Ynoi2019 模拟赛] Yuno loves sqrt technology III - 洛谷</a></p><p>在有了前面两道题的铺垫下，现在来看一下这个题目，思维含量有点大</p><p><strong>这个题目的空间给定的很小，所以freq数组是没办法开出来的</strong>（第一个卡思路的点）</p><p>重点：</p><p>mode[i][j]: 记录的是 i 和 j 块之间的众数出现的次数</p><p>结构体：结构体数组内的每一个个体包含两个元素，第一个记录当前元素的数值，第二个记录这个元素出现在 a 数组中的下标位置</p><p>listIdx 数组 ：该数组记录的是原本在 a 数组中的那个下标所对应的个体，现在在结构体中的下标(<strong>为了实现下标的映射</strong>)</p><p>对于结构体的排序处理：</p><p>对于每一个结构体来说，应该先按照第一个元素（也就是数值）从小到大排序，再按照第二个元素（下标）从小到大排序</p><p>本题思路分析：</p><p>(1) 初始化mode数组，结构体，对结构体排序，初始化listIdx数组</p><p>(2) 区间查询</p><p>如果在一个块内：暴力查询即可</p><p><strong>否则</strong></p><p><strong>接下来是本题的关键分析点，要结合前面设定的mode、结构体、listIdx 三者一起完成</strong></p><p>先记录下来区间内整块所对应的众数的出现次数，然后分别遍历左右残块</p><p>遍历左残块时，从当前元素的下标找到结构体中对应的下标idx &#x3D; listIdx[j]，如果当前的下标 idx 加上想要去扩展的长度 ans 并没有超过 n ，并且在结构体中</p><p>idx + ans 对应位置的元素和 a[j] 仍然相同，并且 idx + ans 位置的坐标在 r 以内，则意味着当前可以通过 a[j] 这个元素把 ans++，然后循环操作看是否可以继续扩展</p><p>遍历右残块思路一样，只不过加号变减号，左右区间换了一下</p><p>时间复杂度分析：</p><p>左右残块的长度加起来最大是 2*√n，而遍历残块时，通过当前元素扩展后，再次在残块中遇到这个元素，也不会扩展出比当前的 ans 更大的答案，所以残块的元素可以只保证遍历一遍，不会多余重复遍历，时间复杂度为 √n 级别</p><p>分析结束，这个题目要是没有学会可以加本人QQ备注来意，私聊解惑 qq 552896886</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=5057">Problem - 5057</a></p><p><strong>单点修改 + 区间查询</strong></p><p>重点：</p><p>jilu[i][D][P]：表示第 i 个块 第 D位是 P 的总个数</p><p>题目注意点（坑了本人挺久）：</p><p>(1) 要看清楚数字的最低位是第一位，请好好读题</p><p>(2) 每一个数字剩下的数位一直到第 10 位，都是前导 0 ，要统计进 jilu 数组中</p><p>(3) 注意是单点修改，别闲着手欠全改，会超时的</p><p>思路整理：</p><p>分块基本模板处理结束后，遍历所有的整块，并处理初始化jilu数组，（while循环拆位即可）</p><p>然后在m次操作中</p><p>单点修改：将 x 位置的数字改成 y，现在的数字一个是 a[x],另一个是 y，分别将这两个数字拆位，然后更新数字所在整块的 jilu 数组</p><p>区间查询：如果是残块的话，直接暴力循环找答案，如果是整块的话，利用 jilu 数组统计即可</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> NN = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> block,t,st[N],ed[N],pos[N];<br><span class="hljs-type">int</span> jilu[NN][<span class="hljs-number">11</span>][<span class="hljs-number">11</span>]; <span class="hljs-comment">// 统计数位的数组 </span><br><span class="hljs-comment">// 最低位是 第 1 位， 这个要注意！ </span><br><span class="hljs-comment">// 第二点注意前导 0 也要统计进去的 </span><br><span class="hljs-comment">// 注意是单点修改 </span><br><span class="hljs-comment">// 注意初始化 </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    block = <span class="hljs-built_in">sqrt</span>(n);<br>    t = n/block;<br>    <span class="hljs-keyword">if</span>(n%block) t++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)&#123;<br>        st[i] = (i<span class="hljs-number">-1</span>)*block + <span class="hljs-number">1</span>;<br>        ed[i] = i*block;<br>    &#125;<br>    ed[t] = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        pos[i] = (i<span class="hljs-number">-1</span>)/block + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 分块的基本板子</span><br>    <span class="hljs-built_in">memset</span>(jilu,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(jilu));<span class="hljs-comment">// 这里要初始化！！！ </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[i];j&lt;=ed[i];j++)&#123;<br>            <span class="hljs-type">int</span> uu = <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> temp = a[j];<br>            <span class="hljs-keyword">while</span>(temp)&#123;<br>                <span class="hljs-type">int</span> yy = temp % <span class="hljs-number">10</span>;<br>                temp /= <span class="hljs-number">10</span>;<br>                jilu[i][uu][yy]++;<br>                uu++;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = uu;k&lt;=<span class="hljs-number">10</span>;k++) jilu[i][k][<span class="hljs-number">0</span>]++; <span class="hljs-comment">// rew-&gt; 1 </span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 统计数位 ^^^^^^ </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-type">char</span> ch;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; ch;<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;S&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> k1,k2;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; k1 &gt;&gt; k2;<br>            <span class="hljs-type">int</span> temp1 = a[k1];<br>            <span class="hljs-type">int</span> temp2 = k2;<br>            a[k1] = k2;<br>            <span class="hljs-comment">// 这里可以简化一下</span><br>            <span class="hljs-comment">// 只是修改单个数字，这样还可以省一些时间 </span><br>            <span class="hljs-type">int</span> uu = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(temp1)&#123;<br>                <span class="hljs-type">int</span> yy = temp1 % <span class="hljs-number">10</span>;<br>                temp1 /= <span class="hljs-number">10</span>;<br>                jilu[pos[k1]][uu][yy]--;<br>                uu++;    <br>            &#125;          <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = uu;j&lt;=<span class="hljs-number">10</span>;j++) jilu[pos[k1]][j][<span class="hljs-number">0</span>]--;<br>            uu = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(temp2)&#123;<br>                <span class="hljs-type">int</span> yy = temp2 % <span class="hljs-number">10</span>;<br>                temp2 /= <span class="hljs-number">10</span>;<br>                jilu[pos[k1]][uu][yy]++;<br>                uu++;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = uu;j &lt;= <span class="hljs-number">10</span>;j++) jilu[pos[k1]][j][<span class="hljs-number">0</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> l,r;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>            <span class="hljs-type">int</span> d,p;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; d &gt;&gt; p;<br>            <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(pos[l] == pos[r]) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=r;j++)&#123;<br>                    <span class="hljs-type">int</span> uu = <span class="hljs-number">1</span>;<br>                    <span class="hljs-type">int</span> temp = a[j];<br>                    <span class="hljs-keyword">while</span>(temp)&#123;<br>                        <span class="hljs-type">int</span> yy = temp % <span class="hljs-number">10</span>;<br>                        temp /= <span class="hljs-number">10</span>;<br>                        <span class="hljs-keyword">if</span>(uu == d &amp;&amp; yy == p) ans++;<br>                        uu++;<br>                    &#125;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = uu;k&lt;=<span class="hljs-number">10</span>;k++)<br>                        <span class="hljs-keyword">if</span>(k == d &amp;&amp; p == <span class="hljs-number">0</span>) ans++;<br>                &#125; <br>            &#125;    <br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l;j&lt;=ed[pos[l]];j++)&#123;<br>                    <span class="hljs-type">int</span> uu = <span class="hljs-number">1</span>;<br>                    <span class="hljs-type">int</span> temp = a[j];<br>                    <span class="hljs-keyword">while</span>(temp)&#123;<br>                        <span class="hljs-type">int</span> yy = temp % <span class="hljs-number">10</span>;<br>                        temp /= <span class="hljs-number">10</span>;<br>                        <span class="hljs-keyword">if</span>(uu == d &amp;&amp; yy == p) ans++;<br>                        uu++;<br>                    &#125;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = uu;k&lt;=<span class="hljs-number">10</span>;k++)<br>                        <span class="hljs-keyword">if</span>(k == d &amp;&amp; p == <span class="hljs-number">0</span>) ans++;<br>                &#125; <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = st[pos[r]];j&lt;=r;j++)&#123;<br>                    <span class="hljs-type">int</span> uu = <span class="hljs-number">1</span>;<br>                    <span class="hljs-type">int</span> temp = a[j];<br>                    <span class="hljs-keyword">while</span>(temp)&#123;<br>                        <span class="hljs-type">int</span> yy = temp % <span class="hljs-number">10</span>;<br>                        temp /= <span class="hljs-number">10</span>;<br>                        <span class="hljs-keyword">if</span>(uu == d &amp;&amp; yy == p) ans++;<br>                        uu++;<br>                    &#125;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = uu;k&lt;=<span class="hljs-number">10</span>;k++)<br>                        <span class="hljs-keyword">if</span>(k == d &amp;&amp; p == <span class="hljs-number">0</span>) ans++;<br>                &#125;   <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = pos[l] + <span class="hljs-number">1</span>;j&lt;=pos[r] - <span class="hljs-number">1</span>;j++) ans += jilu[j][d][p];    <br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int32_t</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(nullptr);<br>    <span class="hljs-built_in">cout</span>.tie(nullptr);<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--) solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序</title>
    <link href="/2025/07/28/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2025/07/28/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>归并排序主要利用分治思想，时间复杂度O(nlogn)</p><p>1.对数列不断等长拆分，直到一个数的长度</p><p>2.回溯时，按升序合并左右两段</p><p>3.重复以上两个过程，直到递归结束</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n,a[<span class="hljs-number">100010</span>],b[<span class="hljs-number">100010</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">msort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l+r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">msort</span>(l,mid);<br>    <span class="hljs-built_in">msort</span>(mid<span class="hljs-number">+1</span>,r);<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,j = mid + <span class="hljs-number">1</span>,k = l;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]&lt;=a[j]) b[k++] = a[i++];<br>        <span class="hljs-keyword">else</span> b[k++] = a[j++]; <br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid) b[k++] = a[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) b[k++] = a[j++];<br>    <span class="hljs-keyword">for</span>(i = l;i&lt;=r;i++) a[i] = b[i];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>合并</strong></p><p>1.i,j分别指向 a 的左右段起点， k 指向 b 的起点。</p><p>2.枚举a数组，如果左数&lt;&#x3D;右数，把左数放入b数组，否则，把右数放入b数组。</p><p>3.把左段或右段剩余的数放入 b 数组。</p><p>4.把 b 数组的当前段复制回 a数组。</p><p><strong>归并排序可以统计逆序对的个数</strong></p><p>主要注意并理解代码中 res 的加操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> n,a[<span class="hljs-number">100010</span>],b[<span class="hljs-number">100010</span>];<br><span class="hljs-type">int</span> res;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">msort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l+r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">msort</span>(l,mid);<br>    <span class="hljs-built_in">msort</span>(mid<span class="hljs-number">+1</span>,r);<br><br>    <span class="hljs-type">int</span> i = l,j = mid + <span class="hljs-number">1</span>,k = l;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]&lt;=a[j]) b[k++] = a[i++];<br>        <span class="hljs-keyword">else</span> b[k++] = a[j++],res += mid -i + <span class="hljs-number">1</span>; <br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid) b[k++] = a[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) b[k++] = a[j++];<br>    <span class="hljs-keyword">for</span>(i = l;i&lt;=r;i++) a[i] = b[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;   <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>      cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>      cin &gt;&gt; n;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>      <span class="hljs-built_in">msort</span>(<span class="hljs-number">1</span>,n);<br>      cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stl的应用</title>
    <link href="/2025/07/24/stl%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2025/07/24/stl%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>下面这句话是我刚学stl的时候学长跟我说的，现在看看其中的容易有的也是会卡大常数的，例如unordered_map</p><p>由于acm竞赛一般不会卡常数，不需要手写各种数据结构，用stl即可</p><h2 id="1-vector容器-等价理解成c语言中的数组"><a href="#1-vector容器-等价理解成c语言中的数组" class="headerlink" title="1.vector容器(等价理解成c语言中的数组)"></a>1.vector容器(等价理解成c语言中的数组)</h2><p>一维的vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cin &gt;&gt; a[i];<br></code></pre></td></tr></table></figure><p>vector的相关函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回vector a的长度</span><br>a.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//判断是否为空，空的话为1，非空的话为0</span><br>a.<span class="hljs-built_in">push_back</span>(temp);<span class="hljs-comment">//向vector a最后插入temp这个元素</span><br>a.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//删除最后一个元素</span><br></code></pre></td></tr></table></figure><p>二维的vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n,m;<br>cin &gt;&gt; n &gt;&gt; m;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(n,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m,<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>可以理解成n行m列的二维数组，并且初始化值为0</p><h2 id="2-map的应用"><a href="#2-map的应用" class="headerlink" title="2.map的应用"></a>2.map的应用</h2><p>最简单的map的小应用</p><p>遍历map的时间复杂度是log级别的！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>    <span class="hljs-type">int</span> temp;<br>    cin &gt;&gt; temp;<br>    mp[temp]++;<br>&#125;<br></code></pre></td></tr></table></figure><p>map的遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; k:mp)<br>    cout &lt;&lt; k.first &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; k.second&lt;&lt;endl;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">begin</span>();it!=mp.<span class="hljs-built_in">end</span>();it++)<br>    cout &lt;&lt; it-&gt;first &lt;&lt;<span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>关于map的更多的用法，即map中的第一个值用不同的格式存储，例如pair&lt;int,int&gt;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;PII;<br>map&lt;PII,<span class="hljs-type">int</span>&gt;mp;<br>mp[<span class="hljs-built_in">make_pair</span>(a,b)]++;<span class="hljs-comment">//将（a，b）作为数对，计入map中 </span><br></code></pre></td></tr></table></figure><h2 id="3-priority-queue-堆（优先队列）"><a href="#3-priority-queue-堆（优先队列）" class="headerlink" title="3.priority_queue 堆（优先队列）"></a>3.priority_queue 堆（优先队列）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,less&lt;<span class="hljs-type">int</span>&gt;&gt; q;<span class="hljs-comment">//储存int型数据 </span><br>priority_queue&lt;<span class="hljs-type">double</span>,vector&lt;<span class="hljs-type">double</span>&gt;,less&lt;<span class="hljs-type">double</span>&gt;&gt; q;<span class="hljs-comment">//储存double型数据 </span><br>priority_queue&lt;string,vector&lt;string&gt;,less&lt;string&gt;&gt; q;<span class="hljs-comment">//储存string型数据 </span><br>priority_queue&lt;结构体名,vector&lt;结构体名&gt;,less&lt;结构体名&gt;&gt; q;<span class="hljs-comment">//储存结构体或者类 </span><br></code></pre></td></tr></table></figure><p>优先队列默认维护的是最大值，即大根堆</p><p>若是想要小根堆，则将less改成greater即可</p><p>基本函数的应用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">q.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//返回堆当中维护的那个最大/最小值</span><br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出堆中的最大/最小值</span><br>q.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//如果堆为空，就返回真</span><br>q.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回堆中拥有的元素的个数</span><br>q.<span class="hljs-built_in">push</span>(temp);<span class="hljs-comment">//加入一个元素temp </span><br></code></pre></td></tr></table></figure><h2 id="4-string"><a href="#4-string" class="headerlink" title="4.string"></a>4.string</h2><p>字符串的一些题目非常的麻烦，需要我们熟练掌握string的用法</p><p>1.字符串的拼接(两个不同字符串的拼接，字符串自己的复制拼接，字符串和常量字符串的拼接)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello &quot;</span><br>string s2 = <span class="hljs-string">&quot;world!&quot;</span>;<br>string s3 = s1 + s2;<br><span class="hljs-comment">//s3 == &quot;hello world!&quot;</span><br>string s4 = <span class="hljs-string">&quot;hhh&quot;</span>;<br>string s5 = s4 + s4;<br><span class="hljs-comment">//s5 ==&quot;hhhhhh&quot;</span><br>s6 = <span class="hljs-string">&quot;ni hao&quot;</span>;<br>s6 = s6 + <span class="hljs-string">&quot; shuaige&quot;</span>;<br><span class="hljs-comment">//s6 ==&quot;ni hao shuaige&quot;</span><br></code></pre></td></tr></table></figure><p>2.字符串的拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br><span class="hljs-comment">// 把s1全部复制拷贝给s2</span><br>string s3 = (s1,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">//把s1从下标为1开始的三个字符拷贝给s3</span><br><span class="hljs-comment">//s3 == &quot;ell&quot;;</span><br></code></pre></td></tr></table></figure><p>3.字符串的判空与清空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">s1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>s2 = <span class="hljs-string">&quot;&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>();<span class="hljs-comment">//0</span><br>s<span class="hljs-number">2.</span><span class="hljs-built_in">empty</span>();<span class="hljs-comment">//1</span><br><span class="hljs-comment">// 如果字符串为空的话，返回1。</span><br><span class="hljs-comment">// 如果字符串不为空的话，返回0.</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空了s1字符串</span><br></code></pre></td></tr></table></figure><p><strong>4.字符串的增删查改</strong></p><p>push_back函数</p><p>append函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;h&#x27;</span>);<span class="hljs-comment">//把h尾插到s字符串的最后，尾插单个字符</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>string s2 = <span class="hljs-string">&quot; world!&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>();<br><span class="hljs-comment">// 括号里面可以是单个字符，也可以是字符串，也可以是整个s2</span><br>string s1 = <span class="hljs-string">&quot;hello &quot;</span>;<br>string s2 = <span class="hljs-string">&quot;world&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>(s2, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//尾插s2从下标0开始的2个字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;w&#x27;</span>); <span class="hljs-comment">//追加2个&#x27;w&#x27;字符在s1后面</span><br></code></pre></td></tr></table></figure><p>+&#x3D; 也是追加字符、字符串的方式之一</p><p>insert函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(s<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(),<span class="hljs-string">&#x27;w&#x27;</span>);<span class="hljs-comment">//向s1字符串之前插入一个</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(s<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(),<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-comment">//插入2个</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;come&quot;</span>); <span class="hljs-comment">//下标为2位置开始插入字符串&quot;come&quot;</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, s3, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>); <span class="hljs-comment">//取s3字符串下标从2开始的6个字符插入s1下标为2的位置</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//取world下标为0(默认)开始的2个字符插入到s1中下标为2的位置</span><br></code></pre></td></tr></table></figure><p>erase函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//删除s1下标从2开始的5个字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//删除s1下标从2开始的所有的字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>();<span class="hljs-comment">//删除整个字符串</span><br></code></pre></td></tr></table></figure><p>replace函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;xxxxxxxx&quot;</span>);<span class="hljs-comment">//将s1下标2开始的5个字符替换成xxxxxxxx;</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;xxx#xxwerqw&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-comment">//将s1下标2开始的5个字符替换成新字符串下标3开始的4个字符</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//将s1下标从2开始的5个字符，替换成3个*</span><br></code></pre></td></tr></table></figure><p>find函数</p><p>注意这个查找的返回值以及你要去查找的下标给定值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-type">int</span> po1 = s<span class="hljs-number">1.f</span>ind(<span class="hljs-string">&quot;ll&quot;</span>);<span class="hljs-comment">//从0位置开始找第一个ll，并返回位置，如果没有找到，返回-1</span><br><span class="hljs-comment">//注意！！！位置是从0开始的</span><br><span class="hljs-type">int</span> po2 = s<span class="hljs-number">1.f</span>ind(<span class="hljs-string">&quot;hel&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//从下标为1开始查找第一个hel</span><br></code></pre></td></tr></table></figure><p>substr函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>string s2 = s<span class="hljs-number">1.</span><span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//将下标从1开始的3个字符给s2</span><br>string s3 = s<span class="hljs-number">1.</span><span class="hljs-built_in">substr</span>();<span class="hljs-comment">//全部给s3</span><br></code></pre></td></tr></table></figure><h5 id="字符读入"><a href="#字符读入" class="headerlink" title="字符读入"></a>字符读入</h5><p>作为一个新手，字符读入总是被空格和回车搞蒙，现在总结一下字符读入的问题</p><p>1.cin 和 scanf 都会遇到空格或者回车强制停</p><p>2.gets读入的时候遇到了空格不会停止</p><p>3.getline(cin,s1) 读入的时候，只能读取一行，也就是遇到了回车就会强制停止</p><h2 id="5-bitset的用法"><a href="#5-bitset的用法" class="headerlink" title="5.bitset的用法"></a>5.bitset的用法</h2><p>bitset 相当于01数组，s.count()可以输出当中的1的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">bitset&lt;10&gt; s;<br>s[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>,s[<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>,s[<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)cout &lt;&lt; s[i];<br>cout &lt;&lt; s.<span class="hljs-built_in">count</span>();<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.bitset&lt;N&gt; a;<span class="hljs-comment">//设置a为一个N位的二进制数，初始化全部为 0</span><br>a.<span class="hljs-built_in">set</span>(i,<span class="hljs-number">1</span>);<span class="hljs-comment">//将第i位设置为1</span><br>a.<span class="hljs-built_in">count</span>();<span class="hljs-comment">//统计a中 1 的数量</span><br><span class="hljs-built_in">size</span>(a);<span class="hljs-comment">//获得 a 有几位</span><br>cout &lt;&lt; a;<span class="hljs-comment">//可以直接将a按字符形式输出。</span><br>a.<span class="hljs-built_in">reset</span>();<span class="hljs-comment">//将 1 全变为 0，重新初始化</span><br>a.<span class="hljs-built_in">flip</span>();<span class="hljs-comment">// 0 变 1，1变 0</span><br>a.<span class="hljs-built_in">none</span>();<span class="hljs-comment">//判断是否全为0，全0返回值为1，有1返回值为0</span><br>a.<span class="hljs-built_in">any</span>();<span class="hljs-comment">//判断是有1，全0返回值为0，有1返回值为1</span><br>a.<span class="hljs-built_in">test</span>(i);<span class="hljs-comment">//判断第i位是否为1，是1返回值为1，是0返回值为0 </span><br></code></pre></td></tr></table></figure><p>bitset的用法简单了解一下就可以，一般用bitset来记录一个数字是否使用过了</p><h2 id="6-set的用法"><a href="#6-set的用法" class="headerlink" title="6.set的用法"></a>6.set的用法</h2><p>关于set的用法，详见下面的代码，在自己用的如果有额外的用法可以补充</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// set 维护的值是单一不重复的</span><br>    <span class="hljs-comment">// 即使插入两个相同的值，也是只有一个</span><br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    set&lt;<span class="hljs-type">int</span>&gt; s;<span class="hljs-comment">//定义set（int类型），起名s </span><br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//插入元素 </span><br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//显示s中元素的个数 </span><br>    cout &lt;&lt; s.<span class="hljs-built_in">empty</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//判断s是否为空 </span><br>    cout &lt;&lt; s.<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">//输出s中i的个数（1或者0，因为没有重复元素） </span><br>    s.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空s </span><br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    cout &lt;&lt; s.<span class="hljs-built_in">empty</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一/二维差分</title>
    <link href="/2025/07/24/%E4%B8%80-%E4%BA%8C%E7%BB%B4%E5%B7%AE%E5%88%86/"/>
    <url>/2025/07/24/%E4%B8%80-%E4%BA%8C%E7%BB%B4%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><p>现在给出 n 个数字，给出 q 次操作，每次操作给定一个区间，让区间里的数字都加上一个数或者减去一个数</p><p>如果一点一点遍历的话，就太慢了，所以建议使用一维差分的方法来做</p><p>(1) d数组是差分数组，差分数组多申请一位这样就算 r &#x3D;&#x3D; n 也可以直接写上去，更新前缀和的时候不会算入d[n+1]</p><p>(2) d数组一开始均为 0 ，最后求一遍前缀和得出的是差值，与 a 数组相加即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,q,l,r;<br><span class="hljs-type">int</span> a[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">111</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=q;i++)<br>    &#123;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-type">int</span> temp;<br>        cin &gt;&gt; temp;<br>        d[l] += temp;<br>        d[r<span class="hljs-number">+1</span>] -= temp; <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n;i++) d[i] = d[i<span class="hljs-number">-1</span>] + d[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) a[i] = a[i] + d[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++) cout &lt;&lt; a[i] &lt;&lt;  <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><p>想要从（x1,y1）到（x2,y2）都加上或者减去一个数，建议使用二维差分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">115</span>][<span class="hljs-number">115</span>];<span class="hljs-comment">//初始化出来的差分数组 </span><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            cin &gt;&gt; a[i][j];<br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1,x2,y1,y2;<br>        <span class="hljs-type">int</span> temp;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; temp;<br>        d[x1][y1] += temp;<br>        d[x1][y2<span class="hljs-number">+1</span>] -=temp;<br>        d[x2<span class="hljs-number">+1</span>][y1] -= temp;<br>        d[x2<span class="hljs-number">+1</span>][y2<span class="hljs-number">+1</span>] += temp;    <br>    &#125; <br>    <span class="hljs-comment">// q 次操作之后，再对差分数组求二维前缀和</span><br>    <span class="hljs-comment">// 再将新的d数组加到a数组上，得到最终答案数组 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            d[i][j] = d[i][j] + d[i<span class="hljs-number">-1</span>][j] + d[i][j<span class="hljs-number">-1</span>] - d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            a[i][j] = a[i][j] + d[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            cout &lt;&lt; a[i][j]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//综上得到了最终的二维数组的答案 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串哈希</title>
    <link href="/2025/07/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
    <url>/2025/07/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<p>鼠鼠我来整理哈希的笔记啦~ </p><h2 id="哈希的概念定义性质等的总结"><a href="#哈希的概念定义性质等的总结" class="headerlink" title="哈希的概念定义性质等的总结"></a>哈希的概念定义性质等的总结</h2><h3 id="哈希的定义"><a href="#哈希的定义" class="headerlink" title="哈希的定义"></a>哈希的定义</h3><p>我们定义一个把字符串映射到一个整数的函数 f, f 被称为 Hash 函数</p><p>我们希望通过 f 函数判断两个字符串是否相等</p><h3 id="哈希的性质"><a href="#哈希的性质" class="headerlink" title="哈希的性质"></a>哈希的性质</h3><p>(1) Hash 函数值不同，两个字符串一定不相同</p><p>(2) Hash 函数值相同，两个字符串大概率相同（也可能出现哈希冲突，小概率事件）</p><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>哈希冲突就是两个不同的字符串映射到了同一个哈希值上，在编写程序的时候我们应该尽量避免哈希冲突</p><p>减小哈希冲突常用方法：二次映射（如果有一次哈希值不同，两个字符串就不同）</p><h2 id="字符串哈希的相关代码"><a href="#字符串哈希的相关代码" class="headerlink" title="字符串哈希的相关代码"></a>字符串哈希的相关代码</h2><p>将一个字符串看作数字，设立一个进制（用base表示）,然后将这个字符串变成整数</p><p>常用进制数：31 , 131 , 1313 , 13131 , 131313 </p><p>取模：由于哈希值会超过既定数据范围，所以要有取模操作</p><p>常见取模操作：</p><p>(1) 开 unsigned long long 隐形取余</p><p>(2) 定义模数 const int mod &#x3D; 1e9 + 7;</p><h3 id="字符串哈希模板"><a href="#字符串哈希模板" class="headerlink" title="字符串哈希模板"></a>字符串哈希模板</h3><p><a href="https://www.luogu.com.cn/problem/P3370">P3370 【模板】字符串哈希 - 洛谷</a></p><p>模板1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br>unordered_map&lt;ull,<span class="hljs-type">int</span>&gt; mp;<span class="hljs-comment">// 记录每一个哈希值，溢出自动取余</span><br><span class="hljs-type">int</span> P = <span class="hljs-number">131</span>;<span class="hljs-comment">// 进制数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str;<br>    cin &gt;&gt; str;<br>    ull temp = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录当前字符串的哈希值 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= str.<span class="hljs-built_in">size</span>(); i++)<br>        temp = temp*P + (str[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>);<br>      mp[temp] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>      cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-type">int</span> ans = mp.<span class="hljs-built_in">size</span>();<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>模板2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StringHash</span> <span class="hljs-comment">// 封装了一个类，还是比较有逼格的~</span><br>&#123;<br>    vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; h,b;<br>    <span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>    <span class="hljs-type">int</span> base;<br>    <span class="hljs-built_in">StringHash</span>(string &amp;s,<span class="hljs-type">int</span> base) :<span class="hljs-built_in">h</span>(s.<span class="hljs-built_in">size</span>()<span class="hljs-number">+1</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">b</span>(s.<span class="hljs-built_in">size</span>()<span class="hljs-number">+1</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">base</span>(base)<br>    &#123;<br>        b[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;    <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,n = s.<span class="hljs-built_in">size</span>();i&lt;=n;i++)<br>        &#123;<br>            b[i] = b[i<span class="hljs-number">-1</span>]*base%mod;<br>            h[i] = (h[i<span class="hljs-number">-1</span>]*base + s[i<span class="hljs-number">-1</span>])%mod;<br>        &#125;<br>    &#125;    <br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (h[r] - h[l<span class="hljs-number">-1</span>]*b[r-l<span class="hljs-number">+1</span>]%mod + mod)%mod;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>,<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; PLL;<br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    set&lt;PLL&gt; ans;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        string s;<br>        cin &gt;&gt; s;<br>        <span class="hljs-function">StringHash <span class="hljs-title">h1</span><span class="hljs-params">(s,<span class="hljs-number">13131</span>)</span>,<span class="hljs-title">h2</span><span class="hljs-params">(s,<span class="hljs-number">9973</span>)</span></span>;<br>        <span class="hljs-comment">// 用两个哈希值代替一个字符串</span><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> c1 = h<span class="hljs-number">1.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>,s.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> c2 = h<span class="hljs-number">2.</span><span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>,s.<span class="hljs-built_in">size</span>());<br>        ans.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">PLL</span>(c1,c2)); <br>    &#125;<br>    cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串哈希的进一步应用"><a href="#字符串哈希的进一步应用" class="headerlink" title="字符串哈希的进一步应用"></a>字符串哈希的进一步应用</h2><p><strong>(1) 滑动窗口问题</strong></p><p>例如现在有字符串 abcdef，窗口的长度为 len</p><p>abcd 表示为 A ：abase^3 + bbase^2 + cbase^1 + dbase^0;</p><p>bcde 表示为 B ：b<em>base^3 + c</em>base^2 + d<em>base^1 + e</em>base^0;</p><p>所以当窗口滑动的时候，两个字符串的转化关系为：</p><p>A base - a base^len + e base^0</p><p><strong>(2) 利用前缀和思想记录，并O (1) 地查询区间的哈希值</strong></p><p>可以开两个数组分别表示进位和整体的哈希前缀值，然后进行区间查询</p><h3 id="哈希求解最长回文串问题"><a href="#哈希求解最长回文串问题" class="headerlink" title="哈希求解最长回文串问题"></a>哈希求解最长回文串问题</h3><p>给定一个字符串，求这个字符串中<strong>最长的回文子串</strong></p><p>求解思路：</p><p>二分 + 字符串哈希</p><p>从头到尾遍历字符串的每一位，在每一位上二分回文长度即可，在二分中利用字符串哈希</p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀和问题</title>
    <link href="/2025/07/23/%E5%89%8D%E7%BC%80%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/23/%E5%89%8D%E7%BC%80%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><p>给出 n 个数字，一共 q 次查询，每一次查询问区间 [L,R] 内的数字之和。</p><p>如果遍历的话，时间复杂度太高，所以推荐使用前缀和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,q;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> sum[N]; <br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; q;<span class="hljs-comment">//读入 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];<span class="hljs-comment">//初始化 </span><br>    <span class="hljs-comment">//下面两行代码实现了前缀和数组的初始化 </span><br>    sum[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n;i++) sum[i] = sum[i<span class="hljs-number">-1</span>] + a[i];<br>    <span class="hljs-comment">//sum[i] 记录的是从1到i 的数之和 </span><br>    <span class="hljs-keyword">while</span>(q--)<span class="hljs-comment">//q次查询 </span><br>    &#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-type">int</span> ans = sum[r] - sum[l<span class="hljs-number">-1</span>];<span class="hljs-comment">//注意这个写法 </span><br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p>sum[i][j] 统计的是二维矩阵（1，1）到（i，j）的所有元素的和</p><p>初始化：sum[i][j] &#x3D; a[i][j] + sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];</p><p>答案：int ans &#x3D; sum[x2][y2] - sum[x2][y1-1] - sum[x1-1][y2] + sum[x1-1][y1-1];</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-comment">//设置二维前缀sum的思路有利用容斥思想 </span><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> sum[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            cin &gt;&gt; a[i][j];<br>    sum[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//下面三行是在初始化二维的sum数组 </span><br>    <span class="hljs-comment">//因为我是从1，1开始的，所以直接这样初始化就可以 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>            sum[i][j] = a[i][j] + sum[i<span class="hljs-number">-1</span>][j] + sum[i][j<span class="hljs-number">-1</span>] - sum[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-comment">// 求从（x1,y1）到 （x2,y2） 的全部元素的和</span><br>        <span class="hljs-type">int</span> ans = sum[x2][y2] - sum[x2][y1<span class="hljs-number">-1</span>] - sum[x1<span class="hljs-number">-1</span>][y2] + sum[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>];<br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; <br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/07/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/07/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2025/07/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/07/23/hello-world/"/>
    <url>/2025/07/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
